##############################################################################
#
#   Kennedy Institute of Rheumatology
#
#   $Id$
#
#   Copyright (C) 2018 Stephen Sansom
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
###############################################################################

"""===========================
Pipeline Align
===========================

:Author: Sansom lab
:Release: $Id$
:Date: |today|
:Tags: Python

Overview
========

This pipeline performs alignments between samples using CCA (Seurat) and
Zinbwave.

Usage
=====

See :ref:`PipelineSettingUp` and :ref:`PipelineRunning` on general
information how to use CGAT pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.yml` file.

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_align.py config


Input files
-----------

The pipeline starts from a seurat object containing all of
the data which should be linked into the "data.dir" subfolder

e.g.

$ ls data.dir
combined_data.rds

A meta data column on which to partition the object for alignment
must be specified in the pipeline.yml file.


Dependencies
------------

This pipeline requires:

* cgat-core: https://github.com/cgat-developers/cgat-core
* R & various packages.


Pipeline output
===============

* A seurat object aligned with CCA
* A seurat object aligned with Zinbwave

"""

from ruffus import *
from pathlib import Path
import sys
import os
import shutil
import glob
import sqlite3
import numpy as np
import pandas as pd
from scipy.stats.mstats import gmean
import cgatcore.experiment as E
from cgatcore import pipeline as P
import cgatcore.iotools as IOTools

# -------------------------- < parse parameters > --------------------------- #

# load options from the config file
PARAMS = P.get_parameters(
    ["%s/pipeline.yml" % os.path.splitext(__file__)[0],
     "../pipeline.yml",
     "pipeline.yml"])

# set the location of the tenx code directory
if "tenx_dir" not in PARAMS.keys():
    PARAMS["tenx_dir"] = Path(__file__).parents[1]
else:
    raise ValueError("Could not set the location of the tenx code directory")


# ----------------------- < pipeline configuration > ------------------------ #

# handle pipeline configuration
if len(sys.argv) > 1:
        if(sys.argv[1] == "config") and __name__ == "__main__":
                    sys.exit(P.main(sys.argv))


# ########################################################################### #
# ############################### CCA Alignment ############################# #
# ########################################################################### #

@follows(mkdir("cca.dir"))
@transform("data.dir/*.rds",
           regex(r".*/(.*).rds"),
           r"cca.dir/\1.aligned.rds")
def cca(infile, outfile):
    '''
       Align with CCA
    '''

    log_file = outfile.replace(".rds", ".log")

    job_memory = PARAMS["cca_memory"]

    statement = '''Rscript %(tenx_dir)s/R/seurat_align.R
                   --seuratobject=%(infile)s
                   --metavar=%(cca_metavar)s
                   --strata=%(cca_strata)s
                   --niter=%(cca_niter)s
                   --numccs=%(cca_numccs)s
                   --outfile=%(outfile)s
                   &> %(log_file)s
                '''

    P.run(statement)
    IOTools.touch_file(outfile)


# ########################################################################### #
# ################################## Zinbwave  ############################# #
# ########################################################################### #

@follows(mkdir("zinbwave.dir"))
@transform("data.dir/*.rds",
           regex(r".*/(.*).rds"),
           r"zinbwave.dir/\1.zinbwave.rds")
def zinbwave(infile, outfile):
    '''
       Compute reduced dimensions with zinbwave
    '''

    log_file = outfile.replace(".rds", ".log")

    job_memory = PARAMS["zinbwave_memory"]
    job_threads = PARAMS["zinbwave_ncpu"]

    k_values = [x.strip() for x in PARAMS["zinbwave_k"].split(",")]

    statements = []

    for k_value in k_values:

        stat = '''module unload apps/gsl;
                  Rscript %(tenx_dir)s/R/zinbwave.R
                       --seuratobject=%(infile)s
                       --K=%(k_value)s
                       --X=%(zinbwave_formula)s
                       --ncpu=%(zinbwave_ncpu)s
                       --ncells=%(zinbwave_ncells)s
                       --ngenes=%(zinbwave_ngenes)s
                       --backend=%(zinbwave_backend)s
                       --outfile=%(outfile)s
                       &> %(log_file)s
                    '''
        statements.append(stat)

    P.run(statements)

    IOTools.touch_file(outfile)


# ########################################################################### #
# ##################### full target: to run all tasks ####################### #
# ########################################################################### #

@follows(cca, zinbwave)
def full():
    pass


# ------------------- < ***** end of pipeline **** > ------------------------ #

if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
